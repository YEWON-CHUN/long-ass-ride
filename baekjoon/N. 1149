#RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
#집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.
# 1) 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
# 2) N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# 3) i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

method 1)
T = int(input())
price_list = []
for i in range(T):
    l = list(map(int, input().split()))
    price_list.append(l)


def solution1(x): #이전 R/G/B를 기반으로 그 다음 R/G/B key를 만들어서 return
    l2 = []
    for a in x:
        for b in a:
            if b == 0:
                key = [1,2]
                l2.append(key)
            elif b == 1:
                key = [0,2]
                l2.append(key)
            elif b == 2:
                key = [1,0]
                l2.append(key)
    return l2


def solution2(s,result): #s는 돈 result는 key
    l4 = []
    for i in result:
        l3 = []
        for j in i:
            if j == 0:
                money = price_list[p+1][0]
            elif j == 1:
                money = price_list[p+1][1]
            elif j == 2:
                money = price_list[p+1][2]
            l3.append(money)
        l4.append(l3)
    f = list(range(0,len(l4),2))
    f2 = list(range(len(l4)))

    for i,j in zip(f,f2):
        l4[i][0] += s[j][0]
        l4[i][1] += s[j][0]
        if len(l4)>1:
            l4[i+1][0] += s[j][1]
            l4[i+1][1] += s[j][1]

    return l4


# case1 : 첫번쨰 집이 [0]의 color를 선택한 경우.
first_r = [[0]]
money_r = [[price_list[0][0]]]
for p in range(T-1):
    test = first_r
    result = solution1(test)
    first_r = result

    test2 = money_r
    result2 = solution2(test2, result)
    money_r = result2

total_r = min(sum(result2, []))


# case2 : 첫번쨰 집이 [1]의 color를 선택한 경우.
first_g = [[1]]
money_g = [[price_list[0][1]]]
for p in range(T-1):
    test = first_g
    result = solution1(test)
    first_g = result

    test2 = money_g
    result2 = solution2(test2, result)
    money_g = result2

total_g = min(sum(result2, []))


# case3 : 첫번쨰 집이 [2]의 color를 선택한 경우.
first_b = [[2]]
money_b = [[price_list[0][2]]]
for p in range(T-1):
    test = first_b
    result = solution1(test)
    first_b = result

    test2 = money_b
    result2 = solution2(test2, result)
    money_b = result2

total_b = min(sum(result2, []))

print(min(total_r, total_g, total_b))


method 2)
n = int(input())
p = []
for i in range(n):
    p.append(list(map(int, input().split())))
for i in range(1, len(p)):
    p[i][0] = min(p[i - 1][1], p[i - 1][2]) + p[i][0]
    p[i][1] = min(p[i - 1][0], p[i - 1][2]) + p[i][1]
    p[i][2] = min(p[i - 1][0], p[i - 1][1]) + p[i][2]
print(min(p[n - 1][0], p[n - 1][1], p[n - 1][2]))
