def solveMaze(maze):
    route = []

    n = len(maze)
    route.append([0, 0, 1])
    mark = [[0 for i in range(n)] for j in range(n)]
    mark[0][0] = 1  # mark가 1이라는 것은 이미 방문한 점이라는 뜻!
    top = len(route) - 1
    found = False
    while top > -1 and found is False:  # stack에 좌표가 1개 이상 있고 + 아직 도착에 다다르지 못한 경우
        key = route.pop()
        row, col, direction = key[0], key[1], key[2]
        while direction < 4 and found is False:
            newx = row + dx[direction]
            newy = col + dy[direction]
            if newx <= -1 or newy <= -1 or n <= newx or n <= newy:  # new좌표가 미로를 이탈하는 경우
                direction += 1  # 방향 틀어서 재탐색할 수 있도록
                continue
            if newx == n - 1 and newy == n - 1:
                found = True  # 마지막지점 도달!
            elif maze[newx][newy] == 1 and mark[newx][newy] == 0:  # maze == 1 방문할 수 있는 길, mark == 0 아직 방문하지 않은 점
                mark[newx][newy] = 1
                route.append([row, col, direction + 1])
                top = len(route)-1
                row, col, direction = newx, newy, 0
            else:
                direction += 1
    mark[n-1][n-1] = 1
    for x in range(n):
        for y in range(n):
            print(mark[x][y], end=" ")
        print()


# [행번호, 열번호, 방향]
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
# 방향 차례대로 북쪽(N)부터 시계방향으로

m = []
size = int(input("input size of matrix : "))
for i in range(size):
    m.append(list(map(int, input(f"{i+1}번째 행 입력 (띄어쓰기로 구분) : ").split())))  # 띄어쓰기로 구분해 각 행의 원소 넣기(byrow)
solveMaze(m)
